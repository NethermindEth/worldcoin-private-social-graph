use dep::std::hash::poseidon;

#[export]
fn verify_merkle_proof(leaf: Field, siblings: [Field; 64], indices: [Field; 64], root: Field) -> bool {
    let mut node = leaf;

    for i in 0..64 {
        if (indices[i] == 0) {
                node = hash2([node, siblings[i]]);
        } else {
                node = hash2([siblings[i], node]);        
        }
    }

    assert(root == node);
    true
}

#[export]
pub fn vote_pour(
    // public instances
    root: Field,
    old_sn: Field,
    new_cm_1: Field,
    new_cm_2: Field,
    v_pub: Field, // weight
    h_sig: Field,
    h: Field,
    // private witnesses
    siblings: [Field; 64], 
    indices: [Field; 64],
    // old coin
    old_coin_pk_address: Field,
    old_coin_value: Field,
    old_coin_nullifier_seed: Field,
    old_coin_r: Field,
    old_coin_commitment: Field,
    old_sk: Field,
    // new coin 1
    new_coin_1_pk_address: Field,
    new_coin_1_value: Field,
    new_coin_1_nullifier_seed: Field,
    new_coin_1_r: Field,
    new_coin_1_commitment: Field,
    // new coin 2
    new_coin_2_pk_address: Field,
    new_coin_2_value: Field,
    new_coin_2_nullifier_seed: Field,
    new_coin_2_r: Field,
    new_coin_2_commitment: Field,
) -> bool {
    // 1. check merkle proof
    assert(verify_merkle_proof(old_coin_commitment, siblings, indices, root));
    
    // 2. verify address => address public key = PRF(sk || 0)
    assert(old_coin_pk_address == hash2([old_sk, 0]));

    // 3. verify old serial number is computed correctly
    assert(old_sn == hash3([old_sk, 1, old_coin_nullifier_seed]));

    // 4. coins are well formed
    // a. verify old commitment is computed correctly
    let hash_pk_null = hash2([old_coin_pk_address, old_coin_nullifier_seed]);
    let hash_r_pk_null = hash2([old_coin_r, hash_pk_null]);
    assert(old_coin_commitment == hash3([hash_r_pk_null, 0, old_coin_value]));

    // b. verify new commitment is computed correctly - Coin 1
    let hash_pk_null = hash2([new_coin_1_pk_address, new_coin_1_nullifier_seed]);
    let hash_r_pk_null = hash2([new_coin_1_r, hash_pk_null]);
    assert(new_cm_1 == hash3([hash_r_pk_null, 0, new_coin_1_value])); 
    assert(new_cm_1 == new_coin_1_commitment);

    // c. verify new commitment is computed correctly - Coin 2
    let hash_pk_null = hash2([new_coin_2_pk_address, new_coin_2_nullifier_seed]);
    let hash_r_pk_null = hash2([new_coin_2_r, hash_pk_null]);
    assert(new_cm_2 == hash3([hash_r_pk_null, 0, new_coin_2_value])); 
    assert(new_cm_2 == new_coin_2_commitment);

    // 5. check hash is correctly computed
    assert(h == hash4([old_sk, 2, 0, h_sig]));

    // 6. check value is consistent between old and new coins
    assert(v_pub.lt(old_coin_value) | (old_coin_value == v_pub));
    assert(new_coin_1_value == old_coin_value - v_pub);
    assert(new_coin_2_value == v_pub);
    true
}

#[export]
pub fn claim_pour(
    // public instances
    root: Field,
    old_sn: Field,
    new_cm_1: Field,
    new_cm_2: Field,
    v_pub: Field,
    h_sig: Field,
    h: Field,
    // private witnesses
    siblings: [Field; 64], 
    indices: [Field; 64],
    // old coin
    old_coin_pk_address: Field,
    old_coin_value: Field,
    old_coin_nullifier_seed: Field,
    old_coin_r: Field,
    old_coin_commitment: Field,
    old_sk: Field,
    // new coin 1
    new_coin_1_pk_address: Field,
    new_coin_1_value: Field,
    new_coin_1_nullifier_seed: Field,
    new_coin_1_r: Field,
    new_coin_1_commitment: Field,
    // new coin 2
    new_coin_2_pk_address: Field,
    new_coin_2_value: Field,
    new_coin_2_nullifier_seed: Field,
    new_coin_2_r: Field,
    new_coin_2_commitment: Field,
) -> bool {
    let C: u64 = 140000;
    let alpha: Field = 60;
    
    // 1. verify address => address public key = PRF(sk || 0)
    assert(old_coin_pk_address == hash2([old_sk, 0]));

    // 2. verify old serial number is computed correctly
    assert(old_sn == hash3([old_sk, 1, old_coin_nullifier_seed]));

    // 3. coins are well formed
    // a. verify old commitment is computed correctly
    let hash_pk_null = hash2([old_coin_pk_address, old_coin_nullifier_seed]);
    let hash_r_pk_null = hash2([old_coin_r, hash_pk_null]);
    assert(old_coin_commitment == hash3([hash_r_pk_null, 0, old_coin_value]));

    // b. verify new commitment is computed correctly - Coin 1
    let hash_pk_null = hash2([new_coin_1_pk_address, new_coin_1_nullifier_seed]);
    let hash_r_pk_null= hash2([new_coin_1_r, hash_pk_null]);
    assert(new_cm_1 == hash3([hash_r_pk_null, 0, new_coin_1_value])); 
    assert(new_cm_1 == new_coin_1_commitment);

    // c. verify new commitment is computed correctly - Coin 2
    let hash_pk_null = hash2([new_coin_2_pk_address, new_coin_2_nullifier_seed]);
    let hash_r_pk_null = hash2([new_coin_2_r, hash_pk_null]);
    assert(new_cm_2 == hash3([hash_r_pk_null, 0, new_coin_2_value])); 
    assert(new_cm_2 == new_coin_2_commitment);

    // 4. check hash is correctly computed
    assert(h == hash4([old_sk, 2, 0, h_sig]));

    // 5. check value is consistent between old and new coins
    assert(new_coin_1_value == old_coin_value * alpha);
    assert(new_coin_2_value as u64 == (old_coin_value as u64 * C / v_pub as u64));

    // 6. check merkle proof
    assert(verify_merkle_proof(old_coin_commitment, siblings, indices, root));
    
    true
}

#[export]
pub fn hash2(x: [Field; 2]) -> Field {
    poseidon::bn254::hash_2(x)
}

#[export]
fn hash3(x: [Field; 3]) -> Field {
    poseidon::bn254::hash_3(x)
}

#[export]
fn hash4(x: [Field; 4]) -> Field {
    poseidon::bn254::hash_4(x)
}

#[test]
fn test_hash2() {
    assert(hash2([10,10]) == 2056449770998421094693270621231289260402432781619773239530425938274273592166);
}

#[test]
fn test_hash4() {
    assert(hash4([10,10,10,10]) == 12501290995084169344073844953692250674022814101925614641583223360631835071976);
}

#[test]
fn test_vote_pour() {
    assert(vote_pour(
        17268650262672102849480404863779640859326273781867453312722115277311356725207,
        9752149237913994345145642101760332129281270977824059396392047034871970568444,
        13160802339750321870335884225699099699548755673668589499942547658803152941391,
        9665820627605899280971494431006655029329145830249728092692126698086093138291,
        60,
        7901794728931609131088934750315074784586499427818120649106420644116156921709,
        72135052485410666436990706735269366990684364938189589495508596308050885428,
        [
        5072539480116927025037720982798425062696350095488330330885035668842439351084,
        9741158404073624907267857355828189249933350790106163361940401862704727270788,
        7137672878694319777906894585427240951373264145881528020408086320120852126802,
        11286972368698509976183087595462810875513684078608517520839298933882497716792,
        3607627140608796879659380071776844901612302623152076817094415224584923813162,
        19712377064642672829441595136074946683621277828620209496774504837737984048981,
        20775607673010627194014556968476266066927294572720319469184847051418138353016,
        3396914609616007258851405644437304192397291162432396347162513310381425243293,
        21551820661461729022865262380882070649935529853313286572328683688269863701601,
        6573136701248752079028194407151022595060682063033565181951145966236778420039,
        12413880268183407374852357075976609371175688755676981206018884971008854919922,
        14271763308400718165336499097156975241954733520325982997864342600795471836726,
        20066985985293572387227381049700832219069292839614107140851619262827735677018,
        9394776414966240069580838672673694685292165040808226440647796406499139370960,
        11331146992410411304059858900317123658895005918277453009197229807340014528524,
        15819538789928229930262697811477882737253464456578333862691129291651619515538,
        19217088683336594659449020493828377907203207941212636669271704950158751593251,
        21035245323335827719745544373081896983162834604456827698288649288827293579666,
        6939770416153240137322503476966641397417391950902474480970945462551409848591,
        10941962436777715901943463195175331263348098796018438960955633645115732864202,
        15019797232609675441998260052101280400536945603062888308240081994073687793470,
        11702828337982203149177882813338547876343922920234831094975924378932809409969,
        11217067736778784455593535811108456786943573747466706329920902520905755780395,
        16072238744996205792852194127671441602062027943016727953216607508365787157389,
        17681057402012993898104192736393849603097507831571622013521167331642182653248,
        21694045479371014653083846597424257852691458318143380497809004364947786214945,
        8163447297445169709687354538480474434591144168767135863541048304198280615192,
        14081762237856300239452543304351251708585712948734528663957353575674639038357,
        16619959921569409661790279042024627172199214148318086837362003702249041851090,
        7022159125197495734384997711896547675021391130223237843255817587255104160365,
        4114686047564160449611603615418567457008101555090703535405891656262658644463,
        12549363297364877722388257367377629555213421373705596078299904496781819142130,
        21443572485391568159800782191812935835534334817699172242223315142338162256601,
        7694308195910501081009121293114024464085863242234210875116972222894508088593,
        19436655221357744084268084733086758091063031655958874977393275057113871387612,
        504560679421594568008785884377411103919276592025608068716624135509042913445,
        15514326198544383705779305874810179498683015466891608623734708520949427780297,
        18050509671301509180529516585664868376547568536829464907482108610907095064846,
        19325995768811681758893355971515631026389726043952646765279836704328238552444,
        8113285533935262288634445323179958309977466935574634157770415170084803339932,
        8687547638004116013653730449839507042090717944911454416140763808366589487233,
        4219934094845838724099095219278168649992089956853624078935311899188458960130,
        21510527040952709378449317309184621997982521234980256342111982994820444178998,
        16272061764917814078206842113147941744775443333197972862535270406092765485800,
        11950748278519216592208446055847647646851748187875167692033825912643212561651,
        13217514242688721231526300645683365940672260351011673655350090258342076523833,
        10660970513545137636556840216974086019554277128425442705829279218492801035189,
        8948131039435020321600800327463711558797205831163955397039898101595579105221,
        16906416606242269641303814566664742915713407815915901992512191641691459855175,
        7696362380919574231929822929091174343983806983718995651780365734391009404772,
        12854573645099028488554869420787509963660162491364417091508112299804881360636,
        6857504652181458958623580138794948460224063961240329656816309754824511291727,
        6992283057439549332957146383150339351020320768278431475419439803922022055390,
        334371512759760224832847922868872607457756554212035647122157303292798062318,
        20841752159861576320196677046419370857215756073665901785695514969883203596347,
        19882288058145696685144534588876233172579365475569167214053044838112218384620,
        20447810847770146735827616847698723905021991642004209150398262258696427158739,
        19849951506059755799333594000569709327156165614700855325916751990175890174237,
        5984440296261671840525937556795983693857553586395705819695527338901589318488,
        11938950376961958936876335448866413766796578813004726918231801852571282511868,
        4891990323658948848427612645111276503036912217536404073174645228072434592355,
        5060061829367269702853708035142158042375571596573064135123805222282648348339,
        15619714584596964577440081451733944350239603788871202662315665624859679395015,
        1460610903916247465312961358748901557129111457969176228370413593266462079465
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0
      ],
      18317586992660040607903828459770032604528626763310215371582464284574061631354,
      100,
      21085567586255796738367888328638285082772640560878306135379818279731829145600,
      14554421154955718570081175792868389987995275599793071035527162663953166761984,
      2151508354742853881136591304975171921740409424157585135988325664655729297269,
      16856499186231257827313266956088898196212370498203248446240280526049983332352,
      5764154562836081827625704443760209096274060716874600840461524557136904242123,
      40,
      7416675344162966214873750577792302374892810003422998179651672776733221715968,
      11120873022382768677328595818043118199954388645527254489402510164918353788928,
      13160802339750321870335884225699099699548755673668589499942547658803152941391,
      11858651346705390030708912394189665927992481344580529632558323204341155404954,
      60,
      5853338331030888330104974303692702693888681460470187405678009225168560324608,
      6936656590705472359650735649291802493303258997123942390937855274386976669696,
      9665820627605899280971494431006655029329145830249728092692126698086093138291
    ) == true);
}

#[test]
fn test_claim_pour() {
    assert(claim_pour(
        17268650262672102849480404863779640859326273781867453312722115277311356725207,
        9752149237913994345145642101760332129281270977824059396392047034871970568444,
        19351746528389387645271812456151544963511310713496530575626138478447817088102,
        6239013589653206361253580924430260465083581055311658214039979926065955965271,
        600,
        7901794728931609131088934750315074784586499427818120649106420644116156921709,
        72135052485410666436990706735269366990684364938189589495508596308050885428,
        [
        5072539480116927025037720982798425062696350095488330330885035668842439351084,
        9741158404073624907267857355828189249933350790106163361940401862704727270788,
        7137672878694319777906894585427240951373264145881528020408086320120852126802,
        11286972368698509976183087595462810875513684078608517520839298933882497716792,
        3607627140608796879659380071776844901612302623152076817094415224584923813162,
        19712377064642672829441595136074946683621277828620209496774504837737984048981,
        20775607673010627194014556968476266066927294572720319469184847051418138353016,
        3396914609616007258851405644437304192397291162432396347162513310381425243293,
        21551820661461729022865262380882070649935529853313286572328683688269863701601,
        6573136701248752079028194407151022595060682063033565181951145966236778420039,
        12413880268183407374852357075976609371175688755676981206018884971008854919922,
        14271763308400718165336499097156975241954733520325982997864342600795471836726,
        20066985985293572387227381049700832219069292839614107140851619262827735677018,
        9394776414966240069580838672673694685292165040808226440647796406499139370960,
        11331146992410411304059858900317123658895005918277453009197229807340014528524,
        15819538789928229930262697811477882737253464456578333862691129291651619515538,
        19217088683336594659449020493828377907203207941212636669271704950158751593251,
        21035245323335827719745544373081896983162834604456827698288649288827293579666,
        6939770416153240137322503476966641397417391950902474480970945462551409848591,
        10941962436777715901943463195175331263348098796018438960955633645115732864202,
        15019797232609675441998260052101280400536945603062888308240081994073687793470,
        11702828337982203149177882813338547876343922920234831094975924378932809409969,
        11217067736778784455593535811108456786943573747466706329920902520905755780395,
        16072238744996205792852194127671441602062027943016727953216607508365787157389,
        17681057402012993898104192736393849603097507831571622013521167331642182653248,
        21694045479371014653083846597424257852691458318143380497809004364947786214945,
        8163447297445169709687354538480474434591144168767135863541048304198280615192,
        14081762237856300239452543304351251708585712948734528663957353575674639038357,
        16619959921569409661790279042024627172199214148318086837362003702249041851090,
        7022159125197495734384997711896547675021391130223237843255817587255104160365,
        4114686047564160449611603615418567457008101555090703535405891656262658644463,
        12549363297364877722388257367377629555213421373705596078299904496781819142130,
        21443572485391568159800782191812935835534334817699172242223315142338162256601,
        7694308195910501081009121293114024464085863242234210875116972222894508088593,
        19436655221357744084268084733086758091063031655958874977393275057113871387612,
        504560679421594568008785884377411103919276592025608068716624135509042913445,
        15514326198544383705779305874810179498683015466891608623734708520949427780297,
        18050509671301509180529516585664868376547568536829464907482108610907095064846,
        19325995768811681758893355971515631026389726043952646765279836704328238552444,
        8113285533935262288634445323179958309977466935574634157770415170084803339932,
        8687547638004116013653730449839507042090717944911454416140763808366589487233,
        4219934094845838724099095219278168649992089956853624078935311899188458960130,
        21510527040952709378449317309184621997982521234980256342111982994820444178998,
        16272061764917814078206842113147941744775443333197972862535270406092765485800,
        11950748278519216592208446055847647646851748187875167692033825912643212561651,
        13217514242688721231526300645683365940672260351011673655350090258342076523833,
        10660970513545137636556840216974086019554277128425442705829279218492801035189,
        8948131039435020321600800327463711558797205831163955397039898101595579105221,
        16906416606242269641303814566664742915713407815915901992512191641691459855175,
        7696362380919574231929822929091174343983806983718995651780365734391009404772,
        12854573645099028488554869420787509963660162491364417091508112299804881360636,
        6857504652181458958623580138794948460224063961240329656816309754824511291727,
        6992283057439549332957146383150339351020320768278431475419439803922022055390,
        334371512759760224832847922868872607457756554212035647122157303292798062318,
        20841752159861576320196677046419370857215756073665901785695514969883203596347,
        19882288058145696685144534588876233172579365475569167214053044838112218384620,
        20447810847770146735827616847698723905021991642004209150398262258696427158739,
        19849951506059755799333594000569709327156165614700855325916751990175890174237,
        5984440296261671840525937556795983693857553586395705819695527338901589318488,
        11938950376961958936876335448866413766796578813004726918231801852571282511868,
        4891990323658948848427612645111276503036912217536404073174645228072434592355,
        5060061829367269702853708035142158042375571596573064135123805222282648348339,
        15619714584596964577440081451733944350239603788871202662315665624859679395015,
        1460610903916247465312961358748901557129111457969176228370413593266462079465
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0
      ],
      18317586992660040607903828459770032604528626763310215371582464284574061631354,
      100,
      21085567586255796738367888328638285082772640560878306135379818279731829145600,
      14554421154955718570081175792868389987995275599793071035527162663953166761984,
      2151508354742853881136591304975171921740409424157585135988325664655729297269,
      16856499186231257827313266956088898196212370498203248446240280526049983332352,
      5764154562836081827625704443760209096274060716874600840461524557136904242123,
      6000,
      7416675344162966214873750577792302374892810003422998179651672776733221715968,
      11120873022382768677328595818043118199954388645527254489402510164918353788928,
      19351746528389387645271812456151544963511310713496530575626138478447817088102,
      11858651346705390030708912394189665927992481344580529632558323204341155404954,
      23333,
      5853338331030888330104974303692702693888681460470187405678009225168560324608,
      6936656590705472359650735649291802493303258997123942390937855274386976669696,
      6239013589653206361253580924430260465083581055311658214039979926065955965271
    ) == true);
}