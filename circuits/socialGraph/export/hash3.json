{"noir_version":"0.29.0+2da28997dbedce4a00d2162eddb57564bdb23546","hash":5929336989239189680,"abi":{"parameters":[{"name":"x","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"x":[{"start":0,"end":3}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"private"},"return_witnesses":[265]},"bytecode":"","debug_symbols":"5Z3dSltREEbf5Vzn4szec/58lVJK1FgCkoiJhSK+e2ObVGhlNuJcDLPumrorDt93sZhpV5+728310/dv293d/tBdfXnu7vc36+N2vzt9eu763791eFjvXj8djuvHY3c1DEtddZvd7emXoywvq+5ue7/prnR8Wf33uKro+XHVKn8fl/ceD8twfjvq2/ctwztPpS+XH0J6HezvW2SYz4+LjPr2uH/5uuqEMGRJMmTpLz9EKVL+GbISklTCkAOhriMhyYkw5Eyo64KAAQbyZGEes7CSBXrsLBHUI4pobBbusbNEgI9kIR+7sVnQx84SwT4lC/uYjS2MfQ+CfUoW9rEbq4gsEexTsrCP3VjE1qcg2KdkYR/7dIDY+1QE+1TGsQux96mKmBJx76qIvU9FsE9FnLwqYu+jCPZRxM1LEXsfZfxNH0U0NjD7VL28lTpOn8oyMPs4ThmYfT40pd3YwOzjmGVg9vGbcgjMPn6NHQKzj2OWgdnHccrA7OPYWEVkiWCfIQv72I3Nwj52lgj2GbKwj/3vD7Kwj5nliGCfMQv72I3Nwj52loqYMgv72I1F7H1GBPuMWdjHbixi7zMh2GfKwj5mYyfE3mdCsM+kiMYi9j4Tgn0mxM1rQux9JgT7zIib14zY+8wI9pkRN69ZEVki2GdG3LxmxN5nRrDPjLh5LYi9z4JgnwVx81oQe59FEVMibl4LYu+zINhnQdy8FsTeR3oE/EiPuHpJj1j9SI/gH+mVUVrE9kd6BAJJj7h9SY9YAEnPoKDIimfH0kZ2PHumyaCgyJZnz9IqI00GBUUWPXuWFrEJksiqZ88xEXcwiSx7dkwzsu3Zc0zEKUwi+54901TGmIhrmERWPnumyaCgyNJnz9IydkGRtc+eYzIuYpHFz55pMigosvrZs7SMXVBk+bPnmIyLWGT9s2eaDAqKLIB2LG1kA7RnmgwKiuyA9iytMtJkUFAaDXSjtIxdEEMELWlM0I3/e5mxC2K4oCWNDLpRWsYuiKGDljQ+6EZpGbsghhFa0iihG6Vl7IIYUmhJY4W2S5tGC91Ik0FBacTQjdIydkEMNbSkcUM3SsvYBTHs0JJGD22XNo0fupEmg4LSGKIbpVVGmgwKSiOJbpSWsQtiaKIljSfaLm0aUbSdJsMULWlU0Y3SMnZBDFm0pLFFN0rL2AUxfNGSRhjdKC1jF8RQRksaZ7Rd2jTS6EaaDApKo41ulJaxC2KIoyWNObpRWsYuiOGOLmnc0WZpSxp3dCNNBAWVNO7oRmmVkSaCgkoad3SjtIhdUGG4o0sad7Rd2jTuaDtNhju6pHFHN0obmIImkcuYU62fS1MZYwamoA+N2ShtYAryTDMwBXmOGZiCPEsbmIIc04zsjvYcMzAFOZY2sjvaM00GBUV2R3uWNgsFNdJkUFBkd7RnabNQUCNNBgVFdkc7ljayO9ozTQYFRXZHe5ZWGWkyKCiyO9qztIxdUGR3tOeYWSjILm1kd7RjmpHd0Z5jZqGgRmkZu6DI7mjPMRkXscjuaM80GRQU2R3tWVrGLiiyO9pzTMZFLLI72jNNBgVFdkd7lpaxC4rsjvYck3ERi+yO9kyTQUGR3dFepT19+LF+3K6v7zeH0x95/drT7ua43e/OH48/H/585fT2Fw==","file_map":{"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"25":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::bn254::permute;\nuse crate::hash::poseidon::PoseidonConfig;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(\n        consts::x5_2_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(\n        consts::x5_3_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(\n        consts::x5_4_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(\n        consts::x5_5_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(\n        consts::x5_6_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(\n        consts::x5_7_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(\n        consts::x5_8_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(\n        consts::x5_9_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(\n        consts::x5_10_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(\n        consts::x5_11_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(\n        consts::x5_12_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(\n        consts::x5_13_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(\n        consts::x5_14_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(\n        consts::x5_15_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(\n        consts::x5_16_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(\n        consts::x5_17_config(),\n        state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"26":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\nmod perm;\nmod consts;\n\nuse crate::hash::poseidon::PoseidonConfig;\nuse crate::hash::poseidon::apply_matrix;\n// Optimised permutation for this particular field; uses hardcoded rf and rp values,\n// which should agree with those in pos_conf.\n#[field(bn254)]\npub fn permute<M, N, O>(pos_conf: PoseidonConfig<M, N>, mut state: [Field; O]) -> [Field; O] {\n    let PoseidonConfig {t, rf: config_rf, rp: config_rp, alpha, ark, mds} = pos_conf;\n    let rf: u8 = 8;\n    let rp: u8 = [56, 57, 56, 60, 60, 63, 64, 63, 60, 66, 60, 65, 70, 60, 64, 68][state.len() - 2];\n\n    assert(t == state.len() as Field);\n    assert(rf == config_rf);\n    assert(rp == config_rp);\n\n    let mut count = 0;\n    // First half of full rounds\n    for _r in 0..rf / 2 {\n        for i in 0..state.len() {\n            state[i] = state[i] + ark[count + i];\n        } // Shift by round constants\n        for i in 0..state.len() {\n            state[i] = state[i].pow_32(alpha);\n        }\n\n        state = apply_matrix(mds, state); // Apply MDS matrix\n        count = count + t as u64;\n    }\n    // Partial rounds\n    for _r in 0..rp {\n        for i in 0..state.len() {\n            state[i] = state[i] + ark[count + i];\n        } // Shift by round constants\n        state[0] = state[0].pow_32(alpha);\n\n        state = apply_matrix(mds, state); // Apply MDS matrix\n        count = count + t as u64;\n    }\n    // Second half of full rounds\n    for _r in 0..rf / 2 {\n        for i in 0..state.len() {\n            state[i] = state[i] + ark[count + i];\n        } // Shift by round constants\n        for i in 0..state.len() {\n            state[i] = state[i].pow_32(alpha);\n        }\n\n        state = apply_matrix(mds, state); // Apply MDS matrix\n        count = count + t as u64;\n    }\n\n    state\n}\n// Corresponding absorption.\n#[field(bn254)]\nfn absorb<M, N, O, P>(\n    pos_conf: PoseidonConfig<M, N>,\n    mut state: [Field; O], // Initial state; usually [0; O]\n    rate: Field, // Rate\n    capacity: Field, // Capacity; usually 1\n    msg: [Field; P] // Arbitrary length message\n) -> [Field; O] {\n    assert(pos_conf.t == rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i+1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of §3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<N>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"46":{"source":"use dep::std::hash::poseidon;\n\n#[export]\nfn verify_merkle_proof(leaf: Field, siblings: [Field; 64], indices: [Field; 64], root: Field) -> bool {\n    let mut node = leaf;\n\n    for i in 0..64 {\n        if (indices[i] == 0) {\n                node = hash2([node, siblings[i]]);\n        } else {\n                node = hash2([siblings[i], node]);        \n        }\n    }\n\n    assert(root == node);\n    true\n}\n\n#[export]\nfn vote_pour(\n    // public instances\n    root: pub Field,\n    old_sn: pub Field,\n    new_cm_1: pub Field,\n    new_cm_2: pub Field,\n    v_pub: pub Field, // weight\n    h_sig: pub Field,\n    h: pub Field,\n    // private witnesses\n    siblings: [Field; 64], \n    indices: [Field; 64],\n    // old coin\n    old_coin_pk_address: Field,\n    old_coin_value: Field,\n    old_coin_nullifier_seed: Field,\n    old_coin_r: Field,\n    old_coin_s: Field,\n    old_coin_commitment: Field,\n    old_sk: Field,\n    // new coin 1\n    new_coin_1_pk_address: Field,\n    new_coin_1_value: Field,\n    new_coin_1_nullifier_seed: Field,\n    new_coin_1_r: Field,\n    new_coin_1_s: Field,\n    new_coin_1_commitment: Field,\n    // new coin 2\n    new_coin_2_pk_address: Field,\n    new_coin_2_value: Field,\n    new_coin_2_nullifier_seed: Field,\n    new_coin_2_r: Field,\n    new_coin_2_s: Field,\n    new_coin_2_commitment: Field,\n) -> bool {\n    // 1. check merkle proof\n    assert(verify_merkle_proof(old_coin_commitment, siblings, indices, root));\n    \n    // 2. verify address => address public key = PRF(sk || 0)\n    assert(old_coin_pk_address == hash2([old_sk, 0]));\n\n    // 3. verify old serial number is computed correctly\n    assert(old_sn == hash3([old_sk, 1, old_coin_nullifier_seed]));\n\n    // 4. coins are well formed\n    // a. verify old commitment is computed correctly\n    let hash_pk_null = hash2([old_coin_pk_address, old_coin_nullifier_seed]);\n    let hash_r_pk_null = hash2([old_coin_r, hash_pk_null]);\n    assert(old_coin_commitment == hash3([hash_r_pk_null, 0, old_coin_value]));\n\n    // b. verify new commitment is computed correctly - Coin 1\n    let hash_pk_null = hash2([new_coin_1_pk_address, new_coin_1_nullifier_seed]);\n    let hash_r_pk_null = hash2([new_coin_1_r, hash_pk_null]);\n    assert(new_cm_1 == hash3([hash_r_pk_null, 0, new_coin_1_value])); \n    assert(new_cm_1 == new_coin_1_commitment);\n\n    // c. verify new commitment is computed correctly - Coin 2\n    let hash_pk_null = hash2([new_coin_2_pk_address, new_coin_2_nullifier_seed]);\n    let hash_r_pk_null = hash2([new_coin_2_r, hash_pk_null]);\n    assert(new_cm_2 == hash3([hash_r_pk_null, 0, new_coin_2_value])); \n    assert(new_cm_2 == new_coin_2_commitment);\n\n    // 5. check hash is correctly computed\n    assert(h == hash4([old_sk, 2, 0, h_sig]));\n\n    // 6. check value is consistent between old and new coins\n    assert(new_coin_1_value == old_coin_value - v_pub);\n    assert(new_coin_2_value == v_pub);\n    true\n}\n\n#[export]\npub fn claim_pour(\n    // public instances\n    root: Field,\n    old_sn: Field,\n    new_cm_1: Field,\n    new_cm_2: Field,\n    v_pub: [Field; 3], // layout: [alpha, C, sum_i]\n    h_sig: Field,\n    h: Field,\n    // private witnesses\n    siblings: [Field; 64], \n    indices: [Field; 64],\n    // old coin\n    old_coin_pk_address: Field,\n    old_coin_value: Field,\n    old_coin_nullifier_seed: Field,\n    old_coin_r: Field,\n    old_coin_s: Field,\n    old_coin_commitment: Field,\n    old_sk: Field,\n    // new coin 1\n    new_coin_1_pk_address: Field,\n    new_coin_1_value: Field,\n    new_coin_1_nullifier_seed: Field,\n    new_coin_1_r: Field,\n    new_coin_1_s: Field,\n    new_coin_1_commitment: Field,\n    // new coin 2\n    new_coin_2_pk_address: Field,\n    new_coin_2_value: Field,\n    new_coin_2_nullifier_seed: Field,\n    new_coin_2_r: Field,\n    new_coin_2_s: Field,\n    new_coin_2_commitment: Field,\n) -> pub bool {\n    // 1. check merkle proof\n    assert(verify_merkle_proof(old_coin_commitment, siblings, indices, root));\n    \n    // 2. verify address => address public key = PRF(sk || 0)\n    assert(old_coin_pk_address == hash2([old_sk, 0]));\n\n    // 3. verify old serial number is computed correctly\n    assert(old_sn == hash3([old_sk, 1, old_coin_nullifier_seed]));\n\n    // 4. coins are well formed\n    // a. verify old commitment is computed correctly\n    let hash_pk_null = hash2([old_coin_pk_address, old_coin_nullifier_seed]);\n    let hash_r_pk_null = hash2([old_coin_r, hash_pk_null]);\n    assert(old_coin_commitment == hash3([hash_r_pk_null, 0, old_coin_value]));\n\n    // b. verify new commitment is computed correctly - Coin 1\n    let hash_pk_null = hash2([new_coin_1_pk_address, new_coin_1_nullifier_seed]);\n    let hash_r_pk_null= hash2([new_coin_1_r, hash_pk_null]);\n    assert(new_cm_1 == hash3([hash_r_pk_null, 0, new_coin_1_value])); \n    assert(new_cm_1 == new_coin_1_commitment);\n\n    // c. verify new commitment is computed correctly - Coin 2\n    let hash_pk_null = hash2([new_coin_2_pk_address, new_coin_2_nullifier_seed]);\n    let hash_r_pk_null = hash2([new_coin_2_r, hash_pk_null]);\n    assert(new_cm_2 == hash3([hash_r_pk_null, 0, new_coin_2_value])); \n    assert(new_cm_2 == new_coin_2_commitment);\n\n    // 5. check hash is correctly computed\n\n    assert(h == hash4([old_sk, 2, 0, h_sig]));\n\n    // 6. check value is consistent between old and new coins\n    assert(new_coin_1_value == old_coin_value * v_pub[0]);\n    assert(new_coin_2_value as u64 == (old_coin_value as u64 * v_pub[1] as u64 / v_pub[2] as u64));\n    \n    true\n}\n\n#[export]\npub fn hash2(x: [Field; 2]) -> Field {\n    poseidon::bn254::hash_2(x)\n}\n\n#[export]\nfn hash3(x: [Field; 3]) -> Field {\n    poseidon::bn254::hash_3(x)\n}\n\n#[export]\nfn hash4(x: [Field; 4]) -> Field {\n    poseidon::bn254::hash_4(x)\n}\n\n#[test]\nfn test_hash2() {\n    assert(hash2([10,10]) == 2056449770998421094693270621231289260402432781619773239530425938274273592166);\n}\n\n#[test]\nfn test_hash4() {\n    assert(hash4([10,10,10,10]) == 12501290995084169344073844953692250674022814101925614641583223360631835071976);\n}\n\n#[test]\nfn test_vote_pour() {\n    assert(vote_pour(\n        17268650262672102849480404863779640859326273781867453312722115277311356725207,\n        9752149237913994345145642101760332129281270977824059396392047034871970568444,\n        13160802339750321870335884225699099699548755673668589499942547658803152941391,\n        9665820627605899280971494431006655029329145830249728092692126698086093138291,\n        60,\n        7901794728931609131088934750315074784586499427818120649106420644116156921709,\n        72135052485410666436990706735269366990684364938189589495508596308050885428,\n        [\n        5072539480116927025037720982798425062696350095488330330885035668842439351084,\n        9741158404073624907267857355828189249933350790106163361940401862704727270788,\n        7137672878694319777906894585427240951373264145881528020408086320120852126802,\n        11286972368698509976183087595462810875513684078608517520839298933882497716792,\n        3607627140608796879659380071776844901612302623152076817094415224584923813162,\n        19712377064642672829441595136074946683621277828620209496774504837737984048981,\n        20775607673010627194014556968476266066927294572720319469184847051418138353016,\n        3396914609616007258851405644437304192397291162432396347162513310381425243293,\n        21551820661461729022865262380882070649935529853313286572328683688269863701601,\n        6573136701248752079028194407151022595060682063033565181951145966236778420039,\n        12413880268183407374852357075976609371175688755676981206018884971008854919922,\n        14271763308400718165336499097156975241954733520325982997864342600795471836726,\n        20066985985293572387227381049700832219069292839614107140851619262827735677018,\n        9394776414966240069580838672673694685292165040808226440647796406499139370960,\n        11331146992410411304059858900317123658895005918277453009197229807340014528524,\n        15819538789928229930262697811477882737253464456578333862691129291651619515538,\n        19217088683336594659449020493828377907203207941212636669271704950158751593251,\n        21035245323335827719745544373081896983162834604456827698288649288827293579666,\n        6939770416153240137322503476966641397417391950902474480970945462551409848591,\n        10941962436777715901943463195175331263348098796018438960955633645115732864202,\n        15019797232609675441998260052101280400536945603062888308240081994073687793470,\n        11702828337982203149177882813338547876343922920234831094975924378932809409969,\n        11217067736778784455593535811108456786943573747466706329920902520905755780395,\n        16072238744996205792852194127671441602062027943016727953216607508365787157389,\n        17681057402012993898104192736393849603097507831571622013521167331642182653248,\n        21694045479371014653083846597424257852691458318143380497809004364947786214945,\n        8163447297445169709687354538480474434591144168767135863541048304198280615192,\n        14081762237856300239452543304351251708585712948734528663957353575674639038357,\n        16619959921569409661790279042024627172199214148318086837362003702249041851090,\n        7022159125197495734384997711896547675021391130223237843255817587255104160365,\n        4114686047564160449611603615418567457008101555090703535405891656262658644463,\n        12549363297364877722388257367377629555213421373705596078299904496781819142130,\n        21443572485391568159800782191812935835534334817699172242223315142338162256601,\n        7694308195910501081009121293114024464085863242234210875116972222894508088593,\n        19436655221357744084268084733086758091063031655958874977393275057113871387612,\n        504560679421594568008785884377411103919276592025608068716624135509042913445,\n        15514326198544383705779305874810179498683015466891608623734708520949427780297,\n        18050509671301509180529516585664868376547568536829464907482108610907095064846,\n        19325995768811681758893355971515631026389726043952646765279836704328238552444,\n        8113285533935262288634445323179958309977466935574634157770415170084803339932,\n        8687547638004116013653730449839507042090717944911454416140763808366589487233,\n        4219934094845838724099095219278168649992089956853624078935311899188458960130,\n        21510527040952709378449317309184621997982521234980256342111982994820444178998,\n        16272061764917814078206842113147941744775443333197972862535270406092765485800,\n        11950748278519216592208446055847647646851748187875167692033825912643212561651,\n        13217514242688721231526300645683365940672260351011673655350090258342076523833,\n        10660970513545137636556840216974086019554277128425442705829279218492801035189,\n        8948131039435020321600800327463711558797205831163955397039898101595579105221,\n        16906416606242269641303814566664742915713407815915901992512191641691459855175,\n        7696362380919574231929822929091174343983806983718995651780365734391009404772,\n        12854573645099028488554869420787509963660162491364417091508112299804881360636,\n        6857504652181458958623580138794948460224063961240329656816309754824511291727,\n        6992283057439549332957146383150339351020320768278431475419439803922022055390,\n        334371512759760224832847922868872607457756554212035647122157303292798062318,\n        20841752159861576320196677046419370857215756073665901785695514969883203596347,\n        19882288058145696685144534588876233172579365475569167214053044838112218384620,\n        20447810847770146735827616847698723905021991642004209150398262258696427158739,\n        19849951506059755799333594000569709327156165614700855325916751990175890174237,\n        5984440296261671840525937556795983693857553586395705819695527338901589318488,\n        11938950376961958936876335448866413766796578813004726918231801852571282511868,\n        4891990323658948848427612645111276503036912217536404073174645228072434592355,\n        5060061829367269702853708035142158042375571596573064135123805222282648348339,\n        15619714584596964577440081451733944350239603788871202662315665624859679395015,\n        1460610903916247465312961358748901557129111457969176228370413593266462079465\n      ],\n      [\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0\n      ],\n      18317586992660040607903828459770032604528626763310215371582464284574061631354,\n      100,\n      21085567586255796738367888328638285082772640560878306135379818279731829145600,\n      14554421154955718570081175792868389987995275599793071035527162663953166761984,\n      17724287119672484315492656779926954828567053696018542992588010960866804498432,\n      2151508354742853881136591304975171921740409424157585135988325664655729297269,\n      16856499186231257827313266956088898196212370498203248446240280526049983332352,\n      5764154562836081827625704443760209096274060716874600840461524557136904242123,\n      40,\n      7416675344162966214873750577792302374892810003422998179651672776733221715968,\n      11120873022382768677328595818043118199954388645527254489402510164918353788928,\n      7069746254547173537540376210654501968857689979293737725661632757545201303552,\n      13160802339750321870335884225699099699548755673668589499942547658803152941391,\n      11858651346705390030708912394189665927992481344580529632558323204341155404954,\n      60,\n      5853338331030888330104974303692702693888681460470187405678009225168560324608,\n      6936656590705472359650735649291802493303258997123942390937855274386976669696,\n      1273301138684679671842077383497310434315628907573908932686458958022862438400,\n      9665820627605899280971494431006655029329145830249728092692126698086093138291\n    ) == true);\n}\n\n#[test]\nfn test_claim_pour() {\n    assert(claim_pour(\n        17268650262672102849480404863779640859326273781867453312722115277311356725207,\n        9752149237913994345145642101760332129281270977824059396392047034871970568444,\n        19351746528389387645271812456151544963511310713496530575626138478447817088102,\n        6239013589653206361253580924430260465083581055311658214039979926065955965271,\n        [60,140000,600],\n        7901794728931609131088934750315074784586499427818120649106420644116156921709,\n        72135052485410666436990706735269366990684364938189589495508596308050885428,\n        [\n        5072539480116927025037720982798425062696350095488330330885035668842439351084,\n        9741158404073624907267857355828189249933350790106163361940401862704727270788,\n        7137672878694319777906894585427240951373264145881528020408086320120852126802,\n        11286972368698509976183087595462810875513684078608517520839298933882497716792,\n        3607627140608796879659380071776844901612302623152076817094415224584923813162,\n        19712377064642672829441595136074946683621277828620209496774504837737984048981,\n        20775607673010627194014556968476266066927294572720319469184847051418138353016,\n        3396914609616007258851405644437304192397291162432396347162513310381425243293,\n        21551820661461729022865262380882070649935529853313286572328683688269863701601,\n        6573136701248752079028194407151022595060682063033565181951145966236778420039,\n        12413880268183407374852357075976609371175688755676981206018884971008854919922,\n        14271763308400718165336499097156975241954733520325982997864342600795471836726,\n        20066985985293572387227381049700832219069292839614107140851619262827735677018,\n        9394776414966240069580838672673694685292165040808226440647796406499139370960,\n        11331146992410411304059858900317123658895005918277453009197229807340014528524,\n        15819538789928229930262697811477882737253464456578333862691129291651619515538,\n        19217088683336594659449020493828377907203207941212636669271704950158751593251,\n        21035245323335827719745544373081896983162834604456827698288649288827293579666,\n        6939770416153240137322503476966641397417391950902474480970945462551409848591,\n        10941962436777715901943463195175331263348098796018438960955633645115732864202,\n        15019797232609675441998260052101280400536945603062888308240081994073687793470,\n        11702828337982203149177882813338547876343922920234831094975924378932809409969,\n        11217067736778784455593535811108456786943573747466706329920902520905755780395,\n        16072238744996205792852194127671441602062027943016727953216607508365787157389,\n        17681057402012993898104192736393849603097507831571622013521167331642182653248,\n        21694045479371014653083846597424257852691458318143380497809004364947786214945,\n        8163447297445169709687354538480474434591144168767135863541048304198280615192,\n        14081762237856300239452543304351251708585712948734528663957353575674639038357,\n        16619959921569409661790279042024627172199214148318086837362003702249041851090,\n        7022159125197495734384997711896547675021391130223237843255817587255104160365,\n        4114686047564160449611603615418567457008101555090703535405891656262658644463,\n        12549363297364877722388257367377629555213421373705596078299904496781819142130,\n        21443572485391568159800782191812935835534334817699172242223315142338162256601,\n        7694308195910501081009121293114024464085863242234210875116972222894508088593,\n        19436655221357744084268084733086758091063031655958874977393275057113871387612,\n        504560679421594568008785884377411103919276592025608068716624135509042913445,\n        15514326198544383705779305874810179498683015466891608623734708520949427780297,\n        18050509671301509180529516585664868376547568536829464907482108610907095064846,\n        19325995768811681758893355971515631026389726043952646765279836704328238552444,\n        8113285533935262288634445323179958309977466935574634157770415170084803339932,\n        8687547638004116013653730449839507042090717944911454416140763808366589487233,\n        4219934094845838724099095219278168649992089956853624078935311899188458960130,\n        21510527040952709378449317309184621997982521234980256342111982994820444178998,\n        16272061764917814078206842113147941744775443333197972862535270406092765485800,\n        11950748278519216592208446055847647646851748187875167692033825912643212561651,\n        13217514242688721231526300645683365940672260351011673655350090258342076523833,\n        10660970513545137636556840216974086019554277128425442705829279218492801035189,\n        8948131039435020321600800327463711558797205831163955397039898101595579105221,\n        16906416606242269641303814566664742915713407815915901992512191641691459855175,\n        7696362380919574231929822929091174343983806983718995651780365734391009404772,\n        12854573645099028488554869420787509963660162491364417091508112299804881360636,\n        6857504652181458958623580138794948460224063961240329656816309754824511291727,\n        6992283057439549332957146383150339351020320768278431475419439803922022055390,\n        334371512759760224832847922868872607457756554212035647122157303292798062318,\n        20841752159861576320196677046419370857215756073665901785695514969883203596347,\n        19882288058145696685144534588876233172579365475569167214053044838112218384620,\n        20447810847770146735827616847698723905021991642004209150398262258696427158739,\n        19849951506059755799333594000569709327156165614700855325916751990175890174237,\n        5984440296261671840525937556795983693857553586395705819695527338901589318488,\n        11938950376961958936876335448866413766796578813004726918231801852571282511868,\n        4891990323658948848427612645111276503036912217536404073174645228072434592355,\n        5060061829367269702853708035142158042375571596573064135123805222282648348339,\n        15619714584596964577440081451733944350239603788871202662315665624859679395015,\n        1460610903916247465312961358748901557129111457969176228370413593266462079465\n      ],\n      [\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0\n      ],\n      18317586992660040607903828459770032604528626763310215371582464284574061631354,\n      100,\n      21085567586255796738367888328638285082772640560878306135379818279731829145600,\n      14554421154955718570081175792868389987995275599793071035527162663953166761984,\n      17724287119672484315492656779926954828567053696018542992588010960866804498432,\n      2151508354742853881136591304975171921740409424157585135988325664655729297269,\n      16856499186231257827313266956088898196212370498203248446240280526049983332352,\n      5764154562836081827625704443760209096274060716874600840461524557136904242123,\n      6000,\n      7416675344162966214873750577792302374892810003422998179651672776733221715968,\n      11120873022382768677328595818043118199954388645527254489402510164918353788928,\n      7069746254547173537540376210654501968857689979293737725661632757545201303552,\n      19351746528389387645271812456151544963511310713496530575626138478447817088102,\n      11858651346705390030708912394189665927992481344580529632558323204341155404954,\n      23333,\n      5853338331030888330104974303692702693888681460470187405678009225168560324608,\n      6936656590705472359650735649291802493303258997123942390937855274386976669696,\n      1273301138684679671842077383497310434315628907573908932686458958022862438400,\n      6239013589653206361253580924430260465083581055311658214039979926065955965271\n    ) == true);\n}","path":"/home/mike/Documents/nethermind/worldcoin-private-social-graph/circuits/socialGraph/src/lib.nr"}},"names":["hash3"]}